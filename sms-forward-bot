#!/usr/bin/env bash

TELEGRAM_BOT_BASE="https://api.telegram.org/bot$TELEGRAM_TOKEN"
REDIS="redis-cli"
REDIS_LIST="sms-forward-bot"
RECEIVE_SMS="/usr/local/bin/receive_sms"

$REDIS info clients &> /dev/null
if [ $? -ne 0 ]; then
  echo "Need running redis"
  exit 1
fi

log_info() {
  echo "$@" 1>&2
}

pop_queue() {
  $REDIS --raw BLPOP $REDIS_LIST 10 | tail -n1
}

rpush_queue() {
  $REDIS RPUSH $REDIS_LIST "$1" &> /dev/null
}

lpush_queue() {
  $REDIS LPUSH $REDIS_LIST "$1" &> /dev/null
}

telegram_markdown_escape() {
  # inspired from https://github.com/python-telegram-bot/python-telegram-bot/blob/73b0e29a308da7ebb35328e5731bee8db0c423be/telegram/utils/helpers.py#L126
  echo $(echo "$1" | ruby -pe '$_.gsub!(/([#{Regexp.escape("_*[]()~`>#+-=|{}.!")}])/) { |match| "\\#{match}" }')
}

send_telegram() {
  RX_TIME="$1"
  UNSAFE_TEXT="$2"
  TEXT=`telegram_markdown_escape "$UNSAFE_TEXT"`
  SENDER="$3"
  EMOJI=`echo -e '\xF0\x9F\x93\xAC'`

  MESSAGE=`printf '*%s NEUE SMS! %s NEUE SMS! %s* \n\n*%s*\n*%s*\n\n%b' "$EMOJI" "$EMOJI" "$EMOJI" "$SENDER" "$RX_TIME" "$TEXT"`

  log_info "Sending telegram message ($RX_TIME)"

  http \
        --check-status \
	--ignore-stdin \
	--headers \
	POST "$TELEGRAM_BOT_BASE/sendMessage" \
	chat_id="$TELEGRAM_CHAT_ID" \
	parse_mode=markdown \
	text="$MESSAGE" &> /dev/null
}

cleanup() {
  log_info "!![CLEANUP]!!"

  kill $(jobs -p)
  kill 0
}

mailer() {
  while true; do
    pop_queue | while read -r line; do
      ! [[ -z "$line" ]] && mailer_process "$line"
    done

    sleep 2
  done
}


mailer_process() {
  RX_TIME=`echo "$1" | jq -r .rxTime`
  TEXT=`echo "$1" | jq -r .text`
  SENDER=`echo "$1" | jq -r .sender`

  send_telegram "$RX_TIME" "$TEXT" "$SENDER" || lpush_queue "$1"
}

collector() {
  while true; do
    found=$(collector_find)

    if ! [[ -z "$found" ]]; then
      echo "$found" | while read -r message; do
        rpush_queue "$message"
      done
    fi

    sleep 15
  done
}

collector_find() {
  raw_data=$($RECEIVE_SMS -f $MODEM_ADDR)

  if [ $? -ne 0 ]; then
    return
  fi

  data=$(echo "$raw_data" | jq .)

  echo "$data" \
    | jq -r 'to_entries | .[] | .key' \
    | while read -r smsindex; do
    log_info "New message found on modem"
    sms_data=$(echo "$data" | jq -c -r ".[$smsindex]")
    echo "$sms_data"
  done
}

restart_modem() {
  HTTP_SESSION=`mktemp`
  rm "$HTTP_SESSION"

  # create session
  http \
    --headers \
    --ignore-stdin \
    GET http://$MODEM_ADDR/index.html --session="$HTTP_SESSION"  &> /dev/null

  SESSION_ID=`jq -r .cookies.sessionId.value $HTTP_SESSION`
  TOKEN=`echo "$SESSION_ID" | cut -d'-' -f2`

  http \
    --ignore-stdin \
    --headers \
    --form \
    --session="$HTTP_SESSION" \
    POST http://$MODEM_ADDR/Forms/config \
    token="$TOKEN" \
    "session.password"="$MODEM_PASSWORD" \
    ok_redirect="/index.html" \
    err_redirect="/index.html" &> /dev/null



  config=$(mktemp)
  http \
    --ignore-stdin \
    --session="$HTTP_SESSION" \
    GET http://$MODEM_ADDR/dui/export.cfg?save=export.cfg > $config

  echo "$data" \
    | http \
      --ignore-stdin \
      --headers \
      --form \
      --session="$HTTP_SESSION" \
      POST http://$MODEM_ADDR/Forms/Import \
      token="$TOKEN" \
      ok_redirect="/index.html" \
      err_redirect="/index.html"  \
      config@"$config" &> /dev/null

  rm "$config"

}

case "$1" in
  --restart-modem)  
    echo "Restarting modem"
    restart_modem
    ;;

  --listen)
    echo "Starting collector"
    collector & 

    echo "Starting mailer"
    mailer &

    trap cleanup EXIT
    wait

    ;;

  *) echo "Usage: $0 [--restart-modem/--listen]" ;;
esac


